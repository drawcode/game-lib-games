using System.Collections;
using System.Collections.Generic;
using Engine.Game.App.BaseApp;
using UnityEngine;

public interface IBaseGameController {
    int characterActorEnemyCount {
        get;
    }
    int characterActorsCount {
        get;
    }
    int characterActorSidekickCount {
        get;
    }
    GamePlayerController currentPlayerController {
        get;
    }
    bool isGameRunning {
        get;
    }
    int itemsCount {
        get;
    }
    int itemWeaponsCount {
        get;
    }

    void advanceToResults();
    void advanceToResultsDelayed();
    float angleDir(Vector3 fwd, Vector3 targetDir, Vector3 up);
    void Awake();
    void broadcastResultsDelayed();
    void broadcastResultsDelayed(float delay);
    Vector3 cardinalAngles(Vector3 pos1, Vector3 pos2);
    void changeCharacterModel(string characterCode);
    void changeGameCameraMode(GameCameraView cameraViewTo);
    void changeGameCameraProperties(GameObject cameraObject, Vector3 positionTo, Vector3 rotationTo, float timeDelay);
    void changeGameState(GameStateGlobal gameStateTo);
    void changeGameStates(string app_content_state);
    void changeGameZone(string zone);
    void changeLevelFlash();
    bool checkBounds(Vector3 point);
    void checkForGameOver();
    void checkGameLevelGrid();
    void checkGameLevelItems();
    void checkQueueGameObjectTypeData();
    void clearGameLevelGrid();
    void clearGameLevelItems();
    void clearQueueGameObjectTypeData();
    float contAngle(Vector3 fwd, Vector3 targetDir, Vector3 upDir);
    void cycleCharacterTypes(int updatedIndex);
    void cycleCharacterTypesNext();
    void cycleCharacterTypesPrevious();
    void cycleGameCameraMode();
    void endLevelStats();
    Vector3 filterBounds(Vector3 point);
    void gameContentDisplay(string contentDisplayCodeTo);
    void gamePlayerAttack();
    void gamePlayerAttackAlt();
    void gamePlayerAttackLeft();
    void gamePlayerAttackRight();
    void gamePlayerDefend();
    void gamePlayerDefendAlt();
    void gamePlayerDefendLeft();
    void gamePlayerDefendRight();
    void gamePlayerGoalZone(GameObject goalObject);
    void gamePlayerGoalZoneCountdown(GameObject goalObject);
    void gamePlayerGoalZoneDelayed(GameObject goalObject, float delay);
    IEnumerator gamePlayerGoalZoneDelayedCo(GameObject goalObject, float delay);
    void gamePlayerJump();
    void gamePlayerMagic();
    void gamePlayerMount();
    void gamePlayerOutOfBounds();
    void gamePlayerOutOfBoundsDelayed(float delay);
    IEnumerator gamePlayerOutOfBoundsDelayedCo(float delay);
    void gamePlayerScores(double val);
    void gamePlayerSkill();
    void gamePlayerUse();
    void gameRunningStateContent();
    void gameRunningStateContent(float timeScale);
    void gameRunningStateOverlay();
    void gameRunningStateOverlay(float timeScale);
    void gameRunningStatePause();
    void gameRunningStatePause(float timeScale);
    void gameRunningStateRun();
    void gameRunningStateRun(float timeScale);
    void gameRunningStateStopped();
    void gameRunningStateStopped(float timeScale);
    void gameRuntimeTimeExtend(double extendAmount);
    void gameSetTimeScale(float timeScale);
    GameZoneBad getBadZone(GameObject go);
    GamePlayerController getCurrentController();
    Vector3 getCurrentPlayerPosition();
    string getGameLevelGridKey(Vector3 gridPos);
    GamePlayerController getGamePlayerController(string uid);
    GamePlayerController getGamePlayerController(GameObject go);
    GamePlayerController getGamePlayerControllerObject(GameObject go, bool onlyPlayerControlled);
    GamePlayerController getGamePlayerControllerParent(GameObject go);
    GameZone getGameZone(GameObject go);
    GameZoneGoal getGoalZone(GameObject go);
    GameLevelItemAsset getLevelItemAsset(GameLevelItemAssetData data);
    GameLevelItemAsset getLevelItemAssetFull(GameLevelItemAssetData data);
    GameLevelItemAsset getLevelItemAssetRandom(GameLevelItemAssetData data);
    List<GameLevelItemAsset> getLevelRandomized();
    List<GameLevelItemAsset> getLevelRandomized(List<GameLevelItemAsset> levelItems);
    List<GameLevelItemAsset> getLevelRandomizedGrid();
    List<GameLevelItemAsset> getLevelRandomizedGrid(GameLevelGridData gameLevelGridData);
    List<GameLevelItemAsset> getLevelRandomizedGridAssets(GameLevelGridData gameLevelGridData);
    Vector3 getRandomSpawnLocation();
    Vector3 getRandomVectorInGameBounds();
    void goalZoneChange();
    void goalZoneChange(string zone);
    void handleCamerasInAR();
    void handleCamerasInGame();
    void handleCamerasInUI();
    void handleContentDialogEnergy();
    void handleContentDialogHealth();
    void handleContentDialogXP();
    void handleContentOverview();
    void handleContentTips();
    void handleContentTutorial();
    void handleGoalZoneChange();
    void handleOverlay();
    bool handleTouchInputPoint(Vector3 point);
    bool hasGamePlayerControllerObject(GameObject go, bool onlyPlayerControlled);
    void hideCameras(List<Camera> cams);
    IEnumerator hideCamerasCo(List<Camera> cams);
    void Init();
    void initCameras();
    void initCustomProfileCharacters();
    IEnumerator initCustomProfileCharactersCo();
    void initGameWorldBounds();
    void initLevel(string levelCode);
    IEnumerator initLevelCo(string levelCode);
    void initLevelFinish(string levelCode);
    IEnumerator initLevelFinishCo(string levelCode);
    bool isGameLevelGridSpaceFilled(Vector3 gridPos);
    void loadActor(GameActorDataItem data);
    void loadActor(string characterCode, string displayType);
    void loadActor(string characterCode, string characterType, string spawnType, string displayType, Vector3 pos, Quaternion rot, bool overrideLoading = false);
    IEnumerator loadActorCo(GameActorDataItem data);
    void loadCharacterTypes();
    void loadCurrentProfileCharacter();
    void loadItem(string itemCode);
    void loadItem(GameItemData data);
    void loadItem(string itemCode, string itemType, string spawnType, Vector3 pos);
    IEnumerator loadItemCo(GameItemData data);
    void loadLevel(string code);
    void loadLevelActions();
    void loadLevelActions(float delay);
    void loadLevelAssets();
    void loadLevelAssets(string code);
    void loadLevelItems();
    void loadProfileCharacter(string characterProfileCode);
    void loadStartLevel();
    void loadStartLevel(string levelCode);
    void OnDisable();
    void OnEditStateHandler(GameDraggableEditEnum state);
    void OnEnable();
    void OnGameAIDirectorData(GameAIDirectorData actor);
    void onGameContentDisplay();
    void onGameContentDisplayPause();
    void onGameContentDisplayResume();
    void OnGameItemDirectorData(GameItemData item);
    void OnGameLevelItemsLoaded();
    void onGameNotStarted();
    void onGameOverlay();
    void onGameOverlayPause();
    void onGameOverlayResume();
    void onGamePause();
    void onGamePrepare(bool startGame);
    void onGameQuit();
    void onGameResults();
    void onGameResume();
    void onGameStarted();
    void OnNetworkPlayerContainerAdded(string uid);
    void OnProfileShouldBeSavedEventHandler();
    void pauseGame();
    void playGame();
    void prepareGame(string levelCode);
    void processLevelStats();
    IEnumerator processLevelStatsCo();
    void processProgressCollections(GameGameRuntimeData gameRuntimeData, GamePlayerRuntimeData playerRuntimeData);
    void processQueueGameObjectTypeData();
    void processQueues();
    IEnumerator processQueuesCo();
    void queueGameObjectTypeData(GameObjectQueueItem queueItem);
    void queueGameObjectTypeData(string type, string code, string data_type, string display_type, Vector3 pos, Quaternion rot);
    void quitGame();
    void quitGameRunning();
    void reset();
    void resetCurrentGamePlayer();
    void resetLevel();
    void resetLevelActors();
    void resetRuntimeData();
    void restartGame();
    void resultsGame();
    void resultsGameDelayed();
    void resumeGame();
    void runDirectors();
    void runDirectorsDelayed(float delay);
    IEnumerator runDirectorsDelayedCo(float delay);
    void saveCurrentLevel();
    void saveGameStates();
    void sendInputAxisMessage(string axisNameTo, Vector3 axisInputTo);
    void setGameLevelGridSpaceFilled(Vector3 gridPos, GameLevelItemAsset asset);
    bool shouldUpdateBounds();
    void showCameras(List<Camera> cams);
    IEnumerator showCamerasCo(List<Camera> cams);
    void Start();
    void startGame(string levelCode);
    void startLevel(string levelCode);
    void startLevelStats();
    void stopDirectors();
    void stopGame();
    void syncLevelItem(Vector3 gridPos, GameLevelItemAssetData data);
    void togglePauseGame();
    void Update();
    void updateDirectorAI(bool run);
    void updateDirectorItem(bool run);
    void updateDirectors(bool run);
}